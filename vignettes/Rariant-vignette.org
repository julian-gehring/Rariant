#+TITLE: Comparative Identification and Assessment of Single Nucleotide Variants Through Shifts in Base Call Frequencies
#+AUTHOR: Julian Gehring, Simon Anders, Bernd Klaus (EMBL Heidelberg)

#+PROPERTY: tangle yes

#+LATEX_CLASS: biocKnitrRnwPlain
#+LATEX_HEADER: \usepackage[nottoc,numbib]{tocbibind}
#+LATEX_HEADER: \usepackage{helvet}
#+OPTIONS: html-postamble:nil html-preamble:nil html-style:nil
#+INFOJS_OPT: view:showall toc:t ftoc:t ltoc:nil

#+MACRO: M @@latex:\$1{@@$2@@latex:}@@
#+MACRO: R @@latex:\R{}@@
#+MACRO: Bioconductor @@latex:\Bioconductor{}@@

#+COMMENT: This is only present within latex
#+BEGIN_LaTeX
%\VignetteEngine{knitr::knitr}
%\VignetteIndexEntry{Rariant - PDF}
%\VignettePackage{Rariant}
#+END_LaTeX

#+COMMENT: This is only present within html
#+BEGIN_HTML
<!--
%\VignetteEngine{knitr::knitr}
%\VignetteIndexEntry{Rariant}
%\VignettePackage{Rariant}
-->
#+END_HTML

#+COMMENT: if ':exports none', the code block is not exported to the vignette templates 
#+BEGIN_SRC R :exports code :ravel results='hide', echo=FALSE, message=FALSE, warning=FALSE
  set.seed(1)

  options(width = 70)

  style_file = "bioc.css"

  library(knitr)

  style = if(file.exists(style_file))
              paste(readLines(style_file), collapse = "\n")

  opts_knit$set(self.contained = TRUE,
                upload.fun = image_uri,
                header = c(highlight = style))

  opts_chunk$set(comment = "  ",
                 fig.path = "",
                 fig.align = "center",
                 out.width = "100%",
                 dpi = 300,
                 indent = 10,
                 cache = FALSE,
                 cache.path = "../cache")

  knit_hooks$set(fig.cap = function(before, options, envir) {
      if(!before) {
          paste('<p class="caption">',options$fig.cap,"</p>",sep="")
      }
  })
#+END_SRC

#+BEGIN_HTML
<p class="author-top">Julian Gehring, Simon Anders, Bernd Klaus (EMBL Heidelberg)</p>
#+END_HTML


* Motivation

The advances in high-throughput nucleotide sequencing have lead to new
possibilities of identifying genomic alterations, which is of particular interest
for cancer research.  While the detection of genomic variants is often conducted
by comparing against a population-based reference sequence (such as the human GRCh
37), in the investigation of tumors a comparison between matched samples is
predominantly pursued.  Considering a test sample $T$ and a control sample $C$,
the aim is to identify single nucloetide variants (SNVs) which show significant
changes between the two.  Typically, this is applied for comparing
a tumor sample against a matched normal/constitutive sample of the same patient,
focusing on alterations that may have occurred in the transition to the
cancerous tissue, and therefore are often termed /somatic/ variants.  However, a
broader range of questions can be addressed by extending the focus to include
genomic changes of temporally or spatially separated samples to each other, to
investigate tumor evolution and subclonal shifts cite:yates_evolution_2012.

Extending the scope of comparative variant analyses in a cancer related setting
may require an accompanying change in definitions.  In the classical tumor
versus normal setting, a /somatic/ event is characterized by both the presence
of the variant in the tumor and the absence in the matched normal
[[cite:roberts_comparative_2013]].  This definition is not satisfactory for
comparing different tumor stages against each other.  If we imagine two stages
of a tumor haboring multiple subclones, variants may be present in both stages
with changing abundances.  Here, the classical definition of a /somatic/ variant
would result in missing the event.  In the following, we will therefore focus on
estimating the shift in variant allele frequencies between a test and a control
sample.  The classical somatic definition requiring the variant to be absent in the
control constitutes a special case of this.

Numerous approaches focus on more narrowly defined somatic comparisons,
motivated by scientific questions in the field of cancer genomics
[[cite:kim_comparing_2013]] [[cite:roberts_comparative_2013]].  Most existing methods 
do not allow an explicit statement about the evidence for the absence of a
putative variant in a sample, and a clear distinction is needed whether a /negative/ call
results from a true negative site or the lack of statistical power to detect it.
As an example, imagine a variant calling approach using a hypothesis test with the
null hypothesis that the variant frequencies at a locus are identical for both
samples.  While a significant p-value provides evidence for the presence of a
variant, inverting this argument does not work: A non-significant p-value can
both be indicative of the absence or insufficient power.  Furthermore, most
methods return only a point estimate for the variant frequency in the tumor,
without stating the confidence of the estimate.  However, this information would
be critical to reliably differentiate between variants arising from competing
subclonal populations.

With the =Rariant= package, we pursue a generalized approach for identifying and
quantifying SNV alterations from high-throughput sequencing data in comparative
settings. By focusing on shifts of the non-consensus base call frequencies,
events like loss of heterozygosity and clonal expansions in addition to somatic
variants can be detected.  In the following, we will 1) outline the methodological
framework, 2) provide an example workflow on how to obtain a call set starting
from short-read alignments, and 3) illustrate potential benefits of the methods on
a biological cancer data set.  This methodology can be used for a high
performance identification of variant sites as well as to quantitatively assess
the presence or absence in comparisons between matched samples.


* Methodology

** Comparative shift of non-consensus base call frequencies

Starting with a set of aligned reads we observe the sequencing depth $N^{S}_{i}$
and the number of non-consensus base calls $K^{S}_{i}$ for a sample $S$ at
position $i$.  Non-consensus is here defined as base calls that differ from the
consensus sequence, which can be either the reference sequence or, in a
comparative setting, the most abundant base call in the control sample.  The
non-consensus rate $p^{S}_{i}$, which we assume to be binomially distributed,
can then be estimated as

$$\hat{p}^{S}_{i} = \frac{K^{S}_{i}}{N^{S}_{i}}$$

for sites with $N^{S}_{i} > 0$.  Since $K^{S}_{i} \leq N^{S}_{i}$, the rates are
bound to the range $[0,1]$.

#+COMMENT: What should the CI for N == 0 look like?

The true non-consensus rate

$$p^{S}_{i} = v^{S}_{i} + e^{S}_{i}$$

#+COMMENT: p = K/N = V/N + E/N = (V+E)/N

comprises the presence of a putative variant with a frequency $v^{S}_{i}$ and a
technical error rate $e^{S}_{i}$.  In order to detect and describe the change in
the variant frequency, we focus on the shift $d_{i}$ in non-consensus rates
as the difference of the rates between the test and control samples, which we
estimate as

$$\hat{d}_{i} = \hat{p}^{T}_{i} - \hat{p}^{C}_{i}.$$

If we assume that the true site-specific technical error rates are identical
between the two matched samples  [[cite:muralidharan_detecting_2012]], the difference
of the rates yields an unbiased estimate for the change in the variant
frequency.  Thus, positions not haboring biological alterations will result in
$\hat{d}_{i} \approx 0$.


** Confidence intervals

Distinguishing biological variants from noise requires knowledge
about the variance of the point estimate $\hat{d_{i}}$.  By constructing a
confidence interval (CI) for $d_{i}$ with confidence level $\beta$
[[cite:agresti_categorical_2013]], we assess the certainty of the estimated shift in
non-consensus frequencies.  The probability of the true value being outside the
confidence interval is less than $\alpha = 1 - \beta$.  This is in concordance
with the type I or $\alpha$ error definition in statistical testing.

Under the assumption that the non-consensus counts $K^{S}_{i}$ in our samples
follow binomial distributions with parameters $p^{S}_{i}$ and $N^{S}_{i}$,
several methods have been established for estimating confidence intervals for
the difference of two rate parameters [[cite:fleiss_statistical_2013]]
cite:fagerland_recommended_2011.  The performance of an approach is generally
described in terms of its coverage probability indicating the probability of a
confidence interval to cover the true value (see [[Assessing performance of
confidence interval methods]]).  Coverage probabilities greater and less than the
confidence level $\beta$ describe conservative and liberal behaviors,
respectively. Due to the conservative coverage probabilities and high
computational effort of exact confidence interval estimates, approximate methods
are generally preferred [[cite:agresti_approximate_1998]]
cite:fagerland_recommended_2011.

The Agresti-Caffo (AC) confidence interval cite:agresti_simple_2000

$$\tilde{p}^{T} - \tilde{p}^{C} \pm z \sqrt{ \frac{\tilde{p}^{T} (1 -
\tilde{p}^{T})} {\tilde{N}^{T}} + \frac{\tilde{p}^{C}(1 - \tilde{p}^{C})}
{\tilde{N}^{C}} }$$

with 

$$\tilde{p}^{X} = \frac{K^{X}+\zeta}{N^{X}+2\zeta},$$

$$\tilde{N}^{X} = N^{X} + 2\zeta,$$

$$\zeta = \frac{1}{4} z^2,$$

and $z = z_{(1-\beta)/2}$ as the upper $(1-\beta)/2$ percentile of the standard
normal distribution), is an approximation of the score test-based
confidence interval.  Several publications emphasize the usefulness and
advantages of the AC method over related approaches
cite:fagerland_recommended_2011 cite:piegorsch_sample_2004
cite:schaarschmidt_approximate_2008.


*** Decision making with confidence intervals

While the estimate for the shift in the non-consenus frequency $\hat{d}$
indicates the change in abundance and direction of a variant, the corresponding
confidence interval gives us information about the precision and power of the
estimate.  Generally, wide confidence intervals will be present at sites with
little statistical power, as due to low sequencing depths.

For the case that we compare a tumor to a matched normal sample, we show a set
of hypothetical cases that can be distinguished by regarding the point estimate
and its confidence interval:

#+COMMENT: Explain in more detail
1. Presence of a somatic, heterozygous variant
2. Presence of a somatic, subclonal variant
3. Presence of loss of heterozygosity
4. Absence of a somatic variant
5. Presence or absence of a variant cannot be distinguished due to the low
   certainty of the estimate
6. No power due to insufficient sequencing depth

#+NAME: ci_cases_plot
#+LABEL: ci_cases_plot
#+BEGIN_SRC R :results output graphics :file cases-ci.svg :session *R-devel* :width 14 :height 7 :ravel echo=FALSE, message=FALSE, fig.width=14, fig.height=7, fig.cap='Illustrative cases of confidence intervals for somatic variant frequency estimates'
  library(ggplot2)

  df = data.frame(
      x = factor(rep(c(""), times = 6)),
      case = factor(1:6),
      d = c(0.5, 0.3, -0.525, 0, 0.2, 0),
      cil = c(0.45, 0.2, -0.60, -0.05, -0.3, -1),
      ciu = c(0.55, 0.4, -0.45, 0.05, 0.7, 1)
      )

  p = ggplot(df) + geom_hline(aes(yintercept = 0), color = "darkgray") +
  geom_pointrange(aes(x = x, y = d, ymin = cil, ymax = ciu), size = 1, color =
  "black") + facet_grid( ~ case) + ylim(-1, 1) + theme_bw() +
  theme(legend.position = "none") + xlab("") + ylab("pT - pC")

  print(p)
#+END_SRC


** Distinguishing event classes

Focusing on the comparative shift of non-consensus frequencies allows us to detect and
distinguish different types of events.  Since =Rariant= does not make explicit
assumptions about the abundance of a potential variant in the control sample, we
are further able to find clonal shifts, for example between different tumor
samples, or losses of heterozygocity. Generally, gains and losses of variant
alleles are characterized by positive and negative values of $d$, respectively.
For a differentiated interpretation of the results, we classify a variant into
one of four classes:

- somatic :: A somatic variant that does not occur in the control sample
- hetero/LOH :: A shift away from heterozygous SNP in the control sample
- undecided :: Both of the 'somatic' or 'hetero' are possible
- powerless :: A distinction between the two classes cannot be made due to a
               lack of power

#+COMMENT: Expand

The classification is based on two binomial tests for each position:

1. Somatic variants where the variant allele is not present in the control
   sample, rejecting a binomial test with the alternative hypothesis $H_{1}:
   p^{C} > 0$.

2. Sites with a loss of heterozygosity with a shift away from a heterozygous
   variant in the control sample, rejecting a binomial test with the
   alternative hypothesis $H_{1}: p^{C} \neq \frac{1}{2}$.


** Identifying variant sites in large datasets

The method that we have described before is suited for detecting variant
positions efficiently in large sequencing datasets, including whole-exome and
whole-genome sequencing.  For this purpose, we test for a shift in non-consensus
frequencies between two samples at each genomic position individually:

1. Form the base counts table for four bases A, C, G, T from the aligned
   reads.  In order to reduce the number of false counts, we can optionally
   exclude reads with low base calling quality and clip the head of each read.

2. Determine the consensus sequence: In a comparative setting, we will use the
   most abundant base call.

2. Calculate the sequencing depth $N^{S}_{i}$, mismatch counts $K^{S}_{i}$, and
   derived statistics for both samples, based on the consensus sequence (see
   [[Comparative shift of non-consensus base call frequencies]]).

3. Find potential variant sites with a Fisher's Exact Test, comparing the number
   of mismatching and total bases between the samples: ${K^{T}_{i}, N^{T}_{i},
   K^{C}_{i}, N^{C}_{i}}$.  The p-values are corrected for multiple testing
   according to the Benjamini-Hochberg procedure.  Only positions rejecting the
   null hypothesis at a significance level $\alpha$ are further on considered as
   potential variants.

4. Calculate Agresti-Caffo confidence intervals with confidence level $\beta$,
   in order to evaluate presence or absence of the variant (see [[Confidence
   intervals]]).

5. Classify variant sites into the groups: somatic, LOH, undecided, and
   powerless (see [[Distinguishing event classes]]).


* Workflow

** Multiple Sample Simulation Study

We want to further demostrate the usage and abilities of the =Rariant= package
on a real-life data set.  Due to legal and privacy issues, most human cancer
sequencing data is not publicly accessible and therefore cannot serve as an
example data set here.  Alternatively, we conduct an analysis to mimic the
characteristics of current cancer sequencing studies.

For the purpose of the analysis, we compare three samples from the 1000 Genomes
project [[cite:the_1000_genomes_project_consortium_map_2010]], serving as a
control/normal (=control=) and two related test/tumor samples (=test= and
=test2=).  Further, we simulate a clonal mixture (=mix=) of the two test samples
by combining their reads.

#+BEGIN_SRC R :exports code :ravel results='hide', message=FALSE, warning=FALSE
  library(Rariant)

  library(GenomicRanges)
  library(ggbio)
#+END_SRC


#+BEGIN_SRC R
  tp53_region = GRanges("chr17", IRanges(7565097, 7590856))
#+END_SRC


#+BEGIN_SRC R
  control_bam = system.file("extdata", "platinum", "control.bam", package = "Rariant", mustWork = TRUE)
  test1_bam = system.file("extdata", "platinum", "test.bam", package = "Rariant", mustWork = TRUE)
  test2_bam = system.file("extdata", "platinum", "test2.bam", package = "Rariant", mustWork = TRUE)
  mix_bam = system.file("extdata", "platinum", "mix.bam", package = "Rariant", mustWork = TRUE)
#+END_SRC

#+BEGIN_SRC R
  v_test1 = rariant(test1_bam, control_bam, tp53_region, select = FALSE)
  v_test2 = rariant(test2_bam, control_bam, tp53_region, select = FALSE)
  v_mix = rariant(mix_bam, control_bam, tp53_region, select = FALSE)
#+END_SRC

#+BEGIN_SRC R
  v_all = GenomicRangesList(T1 = v_test1, T2 = v_test2, M = v_mix)

  v_all = endoapply(v_all, updateCalls)
#+END_SRC

To better understand the evidence for the presence or absence of
particular variants across samples, we plot the confidence intervals, colored
according to the predicted event type, and abundance shifts for all sites of
interest, colored according to the sign of the shift.

#+BEGIN_SRC R :exports both :results output graphics :file platinum-ci-tracks-verdict.svg :session *R-devel* :width 14 :height 7 :ravel warning=FALSE :ravel fig.width=14, fig.height=7, fig.cap='Confidence intervals for simulation study'
  t_ci = tracks(lapply(v_all, plotConfidenceIntervals, color = "verdict")) + verdictColorScale()

  print(t_ci)
#+END_SRC

#+BEGIN_SRC R :exports both :results output graphics :file platinum-ci-tracks-event.svg :session *R-devel* :width 14 :height 7 :ravel warning=FALSE :ravel fig.width=14, fig.height=7, fig.cap='Confidence intervals for simulation study'
  t_ci = tracks(lapply(v_all, plotConfidenceIntervals, color = "eventType"))

  print(t_ci)
#+END_SRC

#+BEGIN_SRC R :exports both :results output graphics :file platinum-shift-tracks.svg :session *R-devel* :width 14 :height 7 :ravel warning=FALSE :ravel fig.width=14, fig.height=7, fig.cap='Abundance shifts for simulation study'
  t_rates = tracks(lapply(v_all, plotAbundanceShift))

  print(t_rates)
#+END_SRC

In the following, we look at positions which showed a significant effect in at
least one sample.  This gives us 12 positions to consider in the following.

While most of the variants are somatic, i.e. they do not appear in the control
sample, the last variant position shows a loss of a heterozygous SNP.  Looking
for example in more detail into the group of 5 variant sites around 7.85 Mbp: We
can identify them as consistent with a heterozygous somatic variant in the first
sample, since their 95% CIs overlap the value of 0.5.  In contrast, we can show
the absence of the same variants in the second sample.  The third sample again
shows the presence of the variants, as seen in the first case, but with lower
abundance.  Such a result could be expected in a mixture of subclones, in which
some clones carry a somatic variant and others not.  Further, we can also see
the case of the next variant which consistently exists in all three samples with
the same abundance.

#+BEGIN_SRC R
  z = filterCalls(v_all, verdict %in% c("present", "inbetween", "dontknow"))

  elementLengths(z)
#+END_SRC

#+BEGIN_SRC R :exports both :results output graphics :file platinum-compare-heat1.svg :session *R-devel* :width 7 :height 7 :ravel warning=FALSE :ravel fig.width=7, fig.height=7
  evidenceHeatmap(z, fill = "d", color = "verdict") + verdictColorScale()
#+END_SRC



* Supplementary Information

** Strand-specific analysis

By comparing the confidence intervals between the two strands, we can further detect and
characterize effects such as variations in sequencing depth and strand biases.
We illustrate this with a set of hypothetical cases for confidence intervals for
two strands.  The upper row (cases 4-7) corresponds to sites with overlapping
CIs, whereas the lower row (cases 1-3) shows cases of disagreements between the
CIs indicative of strand biases.  When analyzing the probability for the overlap
of confidence intervals, an adjustment of the confidence level has to be taken
into account [[cite:knol_misuse_2011]].

#+ATTR_RAVEL: fig.cap='Illustrative cases of confidence intervals for somatic variant frequency estimates for two strands'
#+BEGIN_SRC R :results output graphics :file cases-strands.svg :session *R-devel* :width 14 :height 7 :ravel echo=FALSE, message=FALSE, fig.width=14, fig.height=7
  library(ggplot2)
    
  df = data.frame(
      x = factor(rep(c("A", "B"), times = 7)),
      case = factor(rep(c(5, 6, 7, 4, 1, 2, 3), each = 2)),
      dx = c(0.65, -0.65,  0.65,  0.20,  0.65,  0,  0.65,  0.55, 0.65, 0, 0.05, -0.05, -0.05, 0.05),
      cil = c(0.5, -0.8, 0.5, 0.1, 0.5, -0.2, 0.5, 0.4, 0.5, -0.7, -0.1, -0.2, -0.9, -0.8),
      ciu = c(0.8, -0.5, 0.8, 0.3, 0.8, 0.2, 0.8, 0.7, 0.8, 0.7, 0.2, 0.1, 0.8, 0.9),
      group = factor(c(rep("n", 2*3), rep("o", 2*4)))
      )

  p = ggplot(df) + geom_hline(aes(yintercept = 0), color = "darkgray") + geom_hline(aes(yintercept = 0.6), color = "darkred", linetype = "dashed") + geom_pointrange(aes(x = x, y = dx, ymin = cil, ymax = ciu), size = 1, color = "black") + facet_wrap(~ case, nrow = 2) + ylim(-1, 1) +  theme_bw() + theme(legend.position = "none") + xlab("Strand") + ylab("Shift in non-consensus rate")

  print(p)
#+END_SRC

Motivated by the analysis of different Illumina genome and exome sequencing, we
consider strand-biases, in which the non-consensus base call rates differ
significantly between strands at sites with sufficient sequencinq depth, a
neglectable problem with current data sets and analysis pipelines (see also [[Best
practices for short-read processing]]).  In the presence of strand biases, pooling
the counts of both plus and minus strand may be not desirable.  A possible
solution may be to perform a strand-specific analysis, and later combine the
resulting statistics. Gerstung and colleagues discuss different approaches for
combining p-values [[cite:gerstung_reliable_2012]], in particular taking the
minimum, maximum, average, or Fisher combination.  These can be also applied for
confidence intervals, with Fisher's method being equivalent to taking the sum of
both strands.


** Statistical power and sequencing depth                         :noexport:

The statistical power, and thereby the width of the confidence interval, depends
on the sequencing depths in both samples.  For the region harboring the variant
site, we can illustrate the relationship between them by plotting the confidence
interval width against the sequencing depth averaged over both samples.

#+BEGIN_SRC R :exports both :results output graphics :file ci-width-depth.svg :session *R-devel* :width 7 :height 7 :ravel warning=FALSE, fig.height=7, out.width='50%', fig.cap='Confidence interval width - sequencing depth relationship.  The identified variant is marked in blue.'
  df = as.data.frame(vars_all)
  df$ci_width = ciWidth(df)

  p = ggplot(df) +
    geom_point(aes_string(x = "(controlDepth + testDepth) / 2", y = "ci_width", col = "outside")) +
    xlab("Average sequencing depth") + ylab("Confidence interval width") + theme_bw()

  print(p)
#+END_SRC


** Multiple testing adjustment of confidence levels               :noexport:

When computing confidence intervals for a selection of sites, the coverage
probabilities can deviate from the desired confidence level $\beta$.  Benjamini
and Yekutieli [[cite:benjamini_false_2005]] discussed this issue for confidence
intervals and proposed a false-discovery related approach to obtain an adjusted
confidence level

$$\tilde{\beta} = 1 - (1 - \hat{\eta}_{0}) (1 - \beta)$$

based on the estimated fraction $\hat{\eta}_{0}$ of sites consistent with the
null hypothesis.  For most sequencing studies targeting large parts of the exome
or genome, we expect $\hat{\eta}_{0}$ to be close to 1.


** Best practices for short-read processing                       :noexport:

Here we outline our recommendations for how to obtain high-quality variant
calls.

1. Alignment to the reference genome (considering only unique alignment, with a
   reference genome including unplaced contigs and patches, clipping of
   overlapping read pairs for small/negative insert sizes)
2. Removal of duplicated reads
3. Realignment around InDel regions, for all samples of a patient together
4. Initial variant calling
5. Realignment around potential variant regions (to remove aligner specific
   artifacts)
6. Final variant calling


** Assessing performance of confidence interval methods

As outlined before, an important property for assessing confidence intervals is
given by their coverage probabilities.  Ideally, we would expect a method to
have coverage probabilities close to the nominal confidence level \beta over a
wide range in the parameter space.  Previous publications analyzing the
performance focus on parameter settings that deviate from those of sequencing
data sets cite:fagerland_recommended_2011.  Therefore, we perform a simulation
that demonstrates the behavior of the Agresti-Caffo methods for a whole-genome
sequencing study.  For a fixed sequencing depth of 30 in both test and control
sample, the coverage probability of 95% AC confidence intervals is computed for
all possible combinations of mismatch counts $K^{T}$ and $K^{C}$.


#+BEGIN_SRC R :session *R-devel*
  ## WGS
  n1 = 30
  n2 = 30
  k1 = 0:(n1-1)
  k2 = 0:(n2-1)
  cl = 0.95
  n_sample = 1e4
  
  pars = expand.grid(k1 = k1, k2 = k2, n1 = n1, n2 = n2, conf_level = cl)
  
  cp_ac = coverageProbability(pars, fun = acCi, n_sample = n_sample)
#+END_SRC


#+BEGIN_SRC R :exports both :results output graphics :file cp-ac-wgs.svg :session *R-devel* :width 7 :height 7 :ravel warning=FALSE :ravel fig.width=7, fig.height=7, out.width='60%', fig.cap='Coverage probabilities for whole-genome setting'
  p_ac = ggplot(cp_ac) + geom_tile(aes(x = k1, y = k2, fill = cp)) +
      scale_fill_gradient2(midpoint = 0.95, limits = c(0.9, 1)) +
      theme_bw() + xlab("kT") + ylab("kC")

  print(p_ac)
#+END_SRC

For mismatch rates close to 0 or 1 in both samples, the Agresti-Caffo method
shows a conservative perfomance.


** Sample splitting                                               :noexport:

The implementation of the Agresti-Caffo CI also includes a method for improving
the coverage probability, by randomly splitting the sample
[[cite:decrouez_split_2013]].  This is especially useful at sites with low
sequencing depth.

#+BEGIN_SRC R :session *R-devel*
  cp_ac_split = coverageProbability(pars, fun = acCi, n_sample = n_sample, split = TRUE)
  #+END_SRC


#+BEGIN_SRC R :exports both :results output graphics :file cp-ac-wgs-split.svg :session *R-devel* :width 7 :height 7 :ravel warning=FALSE :ravel fig.width=7, fig.height=7, out.width='60%', fig.cap='Coverage probabilities with sample splitting'
  p_ac_split = ggplot(cp_ac_split) + geom_tile(aes(x = k1, y = k2, fill = cp)) + scale_fill_gradient2(midpoint = 0.95, limits = c(0.9, 1)) + theme_bw() + xlab("kT") + ylab("kC")
  
  print(p_ac_split)
#+END_SRC


** Split comparisons                                              :noexport:

#+BEGIN_SRC R :session *R-devel*
  ## bad cases with 'NA's
  idx_na = is.na(cp_ac_split$cp) | is.na(cp_ac_split$aw)
  cp_ac_split[idx_na, ]
  
  dev.new()
  smoothScatter(abs(cp_ac$cp - cl), abs(cp_ac_split$cp - 0.95), pch = 20)
  abline(0, 1)
  
  table(abs(cp_ac$cp - cl) > abs(cp_ac_split$cp - cl))
  
  dev.new()
  plot(cp_ac$aw, (cp_ac_split$aw - cp_ac$aw), pch = 20, log = "x")
  abline(h = 0)
  
  table(cp_ac$aw > cp_ac_split$aw)
  
  
  ## difference plots
  d_cp = cp_ac
  d_cp$d = abs(cp_ac$cp - cl) - abs(cp_ac_split$cp - cl)
  d_cp$w = cp_ac$aw - cp_ac_split$aw
  
  p_d_cp = ggplot(d_cp) + geom_tile(aes(x = k1, y = k2, fill = d)) + scale_fill_gradient2(midpoint = 0, limits = c(-0.02, 0.02)) + theme_bw() + xlab("kT") + ylab("kC")
  
  p_d_w = ggplot(d_cp) + geom_tile(aes(x = k1, y = k2, fill = w)) + scale_fill_gradient2(midpoint = 0, limits = c(-2e-3, 2e-3)) + theme_bw() + xlab("kT") + ylab("kC")
    
  dev.new(); print(p_d_cp)
  dev.new(); print(p_d_w)
  #+END_SRC


** Benchmarking of performance and resources

For an analysis of two matched human tumor samples, we performed a benchmark to
assess the computational time and memory usage on a standard laptop (Thinkpad
X220 built in 2011).  Both samples contain about 95M reads mapped to the
1000genomes reference sequence reads that are considered in the analysis.  For
the analysis of chromosome 22, the analysis with default parameters required
~873s and 600MB of RAM.  For an analysis of all linear toplevel chromosomes
(autosomes and allosomes), this would require ~15h of time.  Please consider
that the current version of =Rariant= is under active development and
computational efficiency will increase with newer versions.


** Alternatives for calling variants                              :noexport:

*** From the command line

The variant calling can also be accessed from the command line.  This is
especially useful for interfacing with other programs or distributing the
calling on a computing cluster.  

#+BEGIN_SRC sh
  rariant --test <test_bam> --control <control_bam> --region chr22:1000-2000 --output <output_file> <other options>
#+END_SRC


#+BEGIN_SRC R
  out_file2 = tempfile()
  
  args = c(
      "--test", test_bam,
      "--control", control_bam,
      "--region", gr2pos(roi),
      "--output", out_file2)
  
  system2(rariantStandalone(), args)
  
  y2 = readRariant(out_file2)
  
  #stopifnot(identical(y, y2))
#+END_SRC



* Frequently Asked Questions

** Getting help

We welcome emails with questions or suggestions about our software, and want to
ensure that we eliminate issues if and when they appear.  We have a few requests
to optimize the process:

-  All emails and follow-up questions should take place over the [[http://bioconductor.org/help/mailing-list/][Bioconductor
   mailing list]], which serves as a repository of information.

- The subject line should contain /Rariant/ and a few words describing the
  problem.  First search the [[http://bioconductor.org/help/mailing-list/][Bioconductor mailing list]], for past threads which might
  have answered your question.

- If you have a question about the behavior of a function, read the sections of
  the manual page for this function by typing a question mark and the function
  name, e.g. =?rariant=.  Additionally, read through the vignette to understand
  the interplay between different functions of the package.  We spend a lot of
  time documenting individual functions and the exact steps that the software is
  performing.

- Include all of your R code related to the question you are asking.
  
- Include complete warning or error messages, and conclude your message with the
  full output of =sessionInfo()=.



** Installing the package

Before you want to install the =Rariant= package, please ensure that
you have the latest version of =R= and =Bioconductor= installed.  For details on
this, please have a look at the help packages for [[http://cran.r-project.org/][R]] and [[http://bioconductor.org/install/][Bioconductor]].  Then you
can open =R= and run the following commands which will install the latest
release version of =Rariant=:

#+BEGIN_SRC R :eval no :ravel eval=FALSE
  source("http://bioconductor.org/biocLite.R")
  biocLite("Rariant")
#+END_SRC


* References

#+BIBLIOGRAPHY: references unsrt limit:t option:-d option:-nobibsource option:-noabstract option:-nokeywords


* Session Info


#+BEGIN_SRC R :ravel echo=FALSE, results='markup'
  sessionInfo()
#+END_SRC

